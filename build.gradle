plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.springframework.boot' version '2.7.18'
  id 'org.owasp.dependencycheck' version '9.0.9'
  id 'com.github.ben-manes.versions' version '0.50.0'
  id 'org.sonarqube' version '4.4.1.3373'
}

group = 'uk.gov.hmcts.reform'
version = '0.1.0' // marks java11 migration

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.3'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  incrementalAnalysis = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required.set(true)
    csv.required.set(false)
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: bulk-scan-ccd-event-handler-sample-app"
    property "sonar.projectKey", "uk.gov.hmcts.reform:bulk-scan-ccd-event-handler-sample-app"
    property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.outputLocation.get().asFile.absolutePath
    // CaseUpdateDetails mostly duplicates ExceptionRecord.
    // Introducing inheritance to avoid this duplication would make these classes coupled
    // though they are intended for different purposes.
    // TODO: remove exclusion of CaseUpdateDetails after getting rid of ExceptionRecord
    property "sonar.exclusions", "**/config/**, **/CaseUpdateDetails.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit           : '5.10.2',
  junitPlatform   : '1.10.2',
  reformLogging   : '6.0.1'
]

configurations.all {
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'commons-io', version: '2.17.0') {
      entry 'commons-io'
    }
    // for CompatibilityNotMetException
    dependencySet(group: 'org.springframework.cloud', version: '3.1.9') {
      entry 'spring-cloud-starter-openfeign'
    }
    dependencySet(group: 'org.apache.logging.log4j', version: '2.20.0') {
      entry 'log4j-api'
      entry 'log4j-to-slf4j'
    }
    //CVE-2022-23181
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.85') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
    // CVE-2020-36518
    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.14.2') {
      entry 'jackson-databind'
    }
    // CVE-2022-25857
    dependencySet(group: 'org.yaml', version: '2.2') {
      entry 'snakeyaml'
    }
    // CVE-2023-24998
    dependencySet(group: 'commons-fileupload', version: '1.5') {
      entry 'commons-fileupload'
    }
  }
}

dependencies {
  def withoutSpringCloudContext = {
    exclude group: 'org.springframework.cloud', module: 'spring-cloud-context'
  }

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.3'
  implementation group: 'commons-validator', name: 'commons-validator', version: '1.8.0'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
  implementation group: 'com.google.guava', name: 'guava', version: '33.0.0-jre'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.4.0'
  testImplementation group: 'com.typesafe', name: 'config', version: '1.4.3'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'au.com.dius', name: 'pact-jvm-provider-junit5', version: '4.0.10'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

mainClassName = 'uk.gov.hmcts.reform.bulkscanccdeventhandler.Application'

bootJar {
  archiveFileName = 'bulk-scan-ccd-event-handler-sample-app.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
